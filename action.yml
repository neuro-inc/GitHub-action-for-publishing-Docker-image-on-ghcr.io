name: 'Release Image'
description: 'Release Docker image on ghcr.io'
inputs:
  github:
    description: 'github context, <toJson(github)>'
    required: true
  image:
    description: 'short image name without repo/owner and tag, e.g. platformstorageapi'
    required: true
  artifact:
    description: 'The artifact name uploaded by workflow_run workflow'
    required: false
    default: 'image'
  token:
    description: 'github token, <secrets.GITHUB_TOKEN>'
    required: true
outputs:
  version:
    description: "Version"
    value: ${{ steps.run.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Collect meta info
      id: run
      run: |
        import json
        import os
        import re
        import sys

        import pprint
        print(f"::notice::\n{pprint.pprint(os.environ)}")

        ctx = json.loads(os.environ["INPUT_GITHUB"])
        event_name = ctx["event_name"]
        if event_name != "workflow_run":
          print(
              f"::error::Invalid event type {event_name}, "
              "release-image-action should be executed on 'workflow_run' event"
          )
          sys.exit(1)

        token = os.environ["INPUT_TOKEN"]

        sha = ctx["sha"]

        actor = ctx["actor"]

        repo = ctx["repository"]

        default_branch = ctx["event"]["repository"]["default_branch"]

        workflow_run = ctx["event"]["workflow_run"]
        default_ref = "refs/heads/" + default_branch
        skip = ctx["ref"] != default_ref
        if not skip:
          skip = workflow_run["event"] != "push"
        if not skip:
          skip = workflow_run["head_branch"] == default_branch
        if not skip:
          skip = workflow_run["conclusion"] != "success"


        head_branch = ctx["event"]["workflow_run"]["head_branch"]
        if not skip:
            if not re.match(r"^d+\.d+(\.d+)?", head_branch):
                print(
                    f"::error:: Invalid tag {head_branch}; ",
                    "The tag should have vYY.MM.NN format ",
                    "where YY is the current year, MM is the current month, "
                    "NN is incremental number, every next month resets the number to 0"
                )
                sys.exit(1)
            else:
                print(f"::set-output name=version::{head_branch[1:]}")

        run_id = workflow_run["event"]["id"]
        print(f"::notice::Run id: {run_id}")

        if skip:
          print("::notice::Skip release")
          sys.exit(0)

        print(f"::notice::download artifact {artifact}")
        subprocess.run("gh", "run", "download", run_id, "--name", artifact,
                       "--repo", repo, check=True, env={"GITHUB_TOKEN": token})

        print("::notice::login to docker")
        subprocess.run("docker", "login", "-u", actor, "--password-stdin", "ghcr.io",
                       input=token.encode("utf8"), check=True)

        print(f"::notice::load artifact {artifact} into docker")
        subprocess.run("docker", "load", "--input", f"{artifact}.tar", check=True)

        print("::notice::tag remote image")
        subprocess.run("docker", "tag", f"{artifact}:latest",
                       f"ghcr.io/neuro-inc/{artifact}:latest", check=True)
        subprocess.run("docker", "tag", f"{artifact}:latest",
                       f"ghcr.io/neuro-inc/{artifact}:{version}", check=True)

        print("::notice::push to ghcr.io")
        subprocess.run("docker", "push",
                       f"ghcr.io/neuro-inc/{artifact}:latest", check=True)
        subprocess.run("docker", "push",
                       f"ghcr.io/neuro-inc/{artifact}:{version}", check=True)

      shell: python
